Today's Agenda
---------------
1. JSP - Java Server Pages
2. JSTL - JSP Standard Tag Library
----------------
What is a JSP?

It is also one of the web technology which meant for creating server side web applications.

Purpose of the JSP is, to over-come the limitations of the Servlets. 

Advantages of JSP over Servlet

There are many advantages of JSP over the Servlet. They are as follows:

1) Extension to Servlet
JSP technology is the extension to Servlet technology. We can use all the features of the Servlet in JSP. In addition to, we can use implicit objects, predefined tags, expression language and Custom tags in JSP, that makes JSP development easy.

2) Easy to maintain
JSP can be easily managed because we can easily separate our business logic with presentation logic. In Servlet technology, we mix our business logic with the presentation logic.

3) Fast Development: No need to recompile and redeploy
If JSP page is modified, we don't need to recompile and redeploy the project. The Servlet code needs to be updated and recompiled if we have to change the look and feel of the application.

4) Less code than Servlet
In JSP, we can use many tags such as action tags, JSTL, custom tags, etc. that reduces the code. Moreover, we can use EL, implicit objects, etc.

The Lifecycle of a JSP Page

The JSP pages follow these phases:

Translation of JSP Page
Compilation of JSP Page
Classloading (the classloader loads class file)
Instantiation (Object of the Generated Servlet is created).
Initialization ( the container invokes jspInit() method).
Request processing ( the container invokes _jspService() method).
Destroy ( the container invokes jspDestroy() method).
---------------------
JSP Coding Points

1.  In JSP file, html and java code can be defined, whenever java wants write, use following scriptlet tag
	<%
		java code
	%>

2.  To import packages in jsp file
	<%@ page  import="package name" %>

3.  JSP Provides set of implicit object to perform different actions. 
		Class			Implicit Object
		---------------------------------------
		HttpServletRequest	request
		HttServletResponse	response
		HttpSession		session
		PrintWriter		out
		PageContext		pageContext

4. JSP provides following different tags. these tags are starts with <jsp:tagname >
	<jsp:include page="pagename"> it allows to call one page within another page
	<jsp:forward page="pagename"> it allows to send from one page to another page


5.  With Jsp Pages we can access Servlet Page by clicking "submit" button.
6.  With Jsp Pages we can also access another jsp Pages as as Servlet by clicking "submit" button.
--------------------------------------
What is a JSTL?
It is a JSP Standard Tag Library.  It will provide some set of tags which meant for designing the jsp web page. 
Advantage of JSTL
1. Fast Development JSTL provides many tags that simplify the JSP.
2. Code Reusability We can use the JSTL tags on various pages.
3. No need to use scriptlet tag It avoids the use of scriptlet tag.

JSTL having 5 types of tags

1. Core Tags
The JSTL core tag provide variable support, URL management, flow control, etc. The URL for the core tag is http://java.sun.com/jsp/jstl/core. The prefix of core tag is c.

---
2. Function Tags
----
3. Formating Tags
4. XML Tags
5. SQL Tags

Steps to configure JSTL in web app

1.  Download jstl1.2.jar file
2.  Add that jar file to the application as well as copy that jar file and paste in Lib Folder
		WebApp-Web-INF - Lib
3.  Now in every jsp page, add following taglib statement at the top place to use jstl tags. 
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %> 
Now we can use all jstl core tag as follows
	<c:tagname>
--------------------
if application is maven web application, then we have to get dependency of the "jstl-1.2", 
that dependency has to add in pom.xml

<!-- https://mvnrepository.com/artifact/javax.servlet/jstl -->
<dependency>
    <groupId>javax.servlet</groupId>
    <artifactId>jstl</artifactId>
    <version>1.2</version>
</dependency>

-------------------
c:out :- it allows to present  any stmt or variable value
<c:out  value="${'stmt'}" />
<c:set> :- it allows to create variable and set value for it. 
<c:set var="variable name>  value="${value}" scope="val" />
c:if :-  to check conditions

<c:if test="${condition}">
	stmt
</c:if>

choose, when and otherwise :- tags are used to check multiple conditions just like switch stmt in java.

<c:choose>  
    <c:when test="${condition}">  
       Stmt  
    </c:when>  
	.....
    <c:otherwise>  
       default stmt
    </c:otherwise>  
</c:choose>  

remove :-  it allows to delete a variable  created by using <c:set> tag

<c:remove var="variable" />

-------------------










